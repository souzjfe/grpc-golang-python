// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: number.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Number_SendNumber_FullMethodName = "/number.Number/SendNumber"
)

// NumberClient is the client API for Number service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberClient interface {
	SendNumber(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*MaxNumberResponse, error)
}

type numberClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberClient(cc grpc.ClientConnInterface) NumberClient {
	return &numberClient{cc}
}

func (c *numberClient) SendNumber(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*MaxNumberResponse, error) {
	out := new(MaxNumberResponse)
	err := c.cc.Invoke(ctx, Number_SendNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberServer is the server API for Number service.
// All implementations must embed UnimplementedNumberServer
// for forward compatibility
type NumberServer interface {
	SendNumber(context.Context, *NumberRequest) (*MaxNumberResponse, error)
	mustEmbedUnimplementedNumberServer()
}

// UnimplementedNumberServer must be embedded to have forward compatible implementations.
type UnimplementedNumberServer struct {
}

func (UnimplementedNumberServer) SendNumber(context.Context, *NumberRequest) (*MaxNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNumber not implemented")
}
func (UnimplementedNumberServer) mustEmbedUnimplementedNumberServer() {}

// UnsafeNumberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberServer will
// result in compilation errors.
type UnsafeNumberServer interface {
	mustEmbedUnimplementedNumberServer()
}

func RegisterNumberServer(s grpc.ServiceRegistrar, srv NumberServer) {
	s.RegisterService(&Number_ServiceDesc, srv)
}

func _Number_SendNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberServer).SendNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Number_SendNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberServer).SendNumber(ctx, req.(*NumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Number_ServiceDesc is the grpc.ServiceDesc for Number service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Number_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "number.Number",
	HandlerType: (*NumberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNumber",
			Handler:    _Number_SendNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "number.proto",
}
